{"name":"Asimov","tagline":"Agent-based SImulation, MOdeling, and Visualization of processes ","body":"# ASIMOV\r\nAgent-based SImulation, MOdeling, and Visualization of processes\r\n\r\nASIMOV is a loosely coupled distributed inference engine that infers knowledge about the details of a process (e.g., consultation) occurring in a context (e.g., hospital) with the sole generic information about the process itself and measurement about a real-life process of that kind. Such knowledge can then be used to calculate KPIs, visualize analytics, make predictions, validate models, explain processes etc.   \r\n\r\nGiven a business process described as a flowchart and some measurements about the process, ASIMOV can infer what sequence of events have led to the measurements, thus inferring and abstracting knowledge about the process itself. \r\n\r\nAs input ASIMOV receives two types of parameters together called the *usecase*:\r\n  - A Process/Workflow that describes what resources (Actors, Assets, Materials, Places, etc.) are **required** to participate in an activity at the same place and time together, and how these activities are sequenced after eachother expressed by a branching probability.\r\n  - A Context describing the types and other properties of resources required to execute the process/workflow descriptions providing detailed information on how they **constrain** the process/workflow in both space and time dimentions.\r\n\r\nASIMOV produces:\r\n  - Events that **explain** the execution of the process/workflow descriptions meeting the requirements of the the process/workflow and the constraints of the resources.\r\n  - A GUI offering Visual Analytics tooling for **verifying/validating** the *usecase* againts the *events*.\r\n\r\n### Version\r\n0.0.1 Beta Release\r\n\r\n### Tech\r\n\r\nCurrently ASIMOV is written in JAVA, more implementations are currently being considered, but not yet planned. ASIMOV uses a number of open source projects to work properly:\r\n\r\n* [EVE] - A web-based agent platform\r\n* [VisJS] - Awesome tooling we use for our visual analytics for verification and validation\r\n* [Neo4J] - A graph database engine used for process and resource path finding.\r\n* [COALA] - A novel abstraction layer for Agents that helps reuse agent code across MASs and ABMs\r\n* [MongoDB] - A NoSQL database for quickly storing produced events, and generation of multiple output views on it.\r\n\r\n> In this BETA version the Multi Agent System bootstraps from a command line application and\r\n> reads an input xml and writes the output to a new xml file once it is finished.\r\n> Plans and preperations are made to transform the application to a more loosley coupled \r\n> micro-service architecture, providing an extention API for developers and a GUI for \r\n> modelers/researchers.\r\n\r\n### Installation\r\n\r\nYou need:\r\n[MongoDB installed] locally.\r\n\r\n\r\n```sh\r\n$ git clone https://github.com/almende asimov\r\n$ cd asimov\r\n$ mvn clean install\r\n$ cd dist\r\n$ java -jar asimov.jar <input.xml> #durationInHours <output.xml>\r\n```\r\n\r\n### Examples\r\n\r\nExamples of how to use ASIMOV can be found here :\r\n\r\n* [examples/simple/README.md](https://github.com/almende/asimov/tree/master/examples/simple/README.md)\r\n\r\n### Development\r\n\r\nWant to contribute? Great!\r\n\r\n### Todo's\r\n\r\n - Finish this document\r\n\r\nLicense\r\n----\r\n\r\nMIT\r\n\r\n\r\n[EVE]:http://eve.almende.com\r\n[VisJS]:http://visjs.org/\r\n[Neo4j]:http://neo4j.com/\r\n[COALA]:https://github.com/krevelen/coala\r\n[MongoDB]:https://www.mongodb.org/\r\n[MongoDB installed]:http://docs.mongodb.org/getting-started/shell/installation/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}