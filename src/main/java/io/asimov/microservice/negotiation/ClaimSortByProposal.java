package io.asimov.microservice.negotiation;

import io.asimov.microservice.negotiation.messages.Claim;
import io.asimov.microservice.negotiation.messages.Proposal;
import io.coala.capability.BasicCapabilityStatus;
import io.coala.capability.Capability;
import io.coala.capability.CapabilityFactory;

import java.util.Comparator;

import rx.Observable;

/**
 * {@link ClaimSortByProposal}
 * 
 * @date $Date: 2014-09-01 11:53:05 +0200 (ma, 01 sep 2014) $
 * @version $Revision: 1048 $
 * @author <a href="mailto:suki@almende.org">suki</a>
 * 
 */
public interface ClaimSortByProposal extends Capability<BasicCapabilityStatus>
{
	interface Factory extends CapabilityFactory<ClaimSortByProposal>
	{
		// empty
	}

	/**
	 * Returns the claim's ordered based on the proposals generated by the
	 * response to the query from the scoreQueryAdapter.
	 * 
	 * @param claims the candidate claims
	 * @param scoreQueryAdapter
	 * @param proposalComparator the comparator to base the 
	 * @return
	 * @throws Exception If an error was encountered during the request (message sending) of proposalsRequests.
	 */
	Observable<Claim> sort(Iterable<Claim> claims,
			ConversionCallback scoreQueryAdapter, 
			Comparator<Proposal> proposalComparator) throws Exception;

	/**
	 * The method that handles the incoming messages needed for the sort.
	 * @param p the incoming proposal.
	 */
	void handle(Proposal p);
}
